TAP version 14
# Subtest: Once called, Reply should return an object with methods
    1..15
    ok 1 - should be equal
    ok 2 - should be equal
    ok 3 - should be equal
    ok 4 - should be equal
    ok 5 - should be equal
    ok 6 - should be equal
    ok 7 - should be equal
    ok 8 - should be equal
    ok 9 - should be equal
    ok 10 - should be equivalent
    ok 11 - should be equal
    ok 12 - should be equal
    ok 13 - should be equal
    ok 14 - should be equal
    ok 15 - should be equal
ok 1 - Once called, Reply should return an object with methods # time=7.899ms

# Subtest: reply.send will logStream error and destroy the stream
    1..1
    ok 1 - Error not logged and not streamed
ok 2 - reply.send will logStream error and destroy the stream # time=1.414ms

# Subtest: reply.send throw with circular JSON
    1..1
    ok 1 - Converting circular structure to JSON
ok 3 - reply.send throw with circular JSON # time=0.436ms

# Subtest: reply.send returns itself
    1..1
    ok 1 - should be equal
ok 4 - reply.send returns itself # time=0.415ms

# Subtest: reply.serializer should set a custom serializer
    1..2
    ok 1 - should be equal
    ok 2 - should be equal
ok 5 - reply.serializer should set a custom serializer # time=0.262ms

# Subtest: reply.serializer should support running preSerialization hooks
    1..3
    ok 1 - preSerialization
    ok 2 - should not error
    ok 3 - should be equal
ok 6 - reply.serializer should support running preSerialization hooks # time=24.355ms

# Subtest: reply.serialize should serialize payload
    1..1
    ok 1 - should be equal
ok 7 - reply.serialize should serialize payload # time=0.367ms

# Subtest: reply.serialize should serialize payload with a custom serializer
    1..2
    ok 1 - should be equal
    ok 2 - custom serializer not called
ok 8 - reply.serialize should serialize payload with a custom serializer # time=0.255ms

# Subtest: reply.serialize should serialize payload with a context default serializer
    1..2
    ok 1 - should be equal
    ok 2 - custom serializer not called
ok 9 - reply.serialize should serialize payload with a context default serializer # time=0.246ms

# Subtest: reply.serialize should serialize payload with Fastify instance
    1..2
    ok 1 - should not error
    ok 2 - should be equal
ok 10 - reply.serialize should serialize payload with Fastify instance # time=8.171ms

# Subtest: within an instance
    ok 1 - should not error
    # Subtest: custom serializer should be used
        1..3
        ok 1 - should not error
        ok 2 - should be equal
        ok 3 - should be equivalent
    ok 2 - custom serializer should be used # time=7.559ms
    
    # Subtest: status code and content-type should be correct
        1..4
        ok 1 - should not error
        ok 2 - should be equal
        ok 3 - should be equal
        ok 4 - should be equivalent
    ok 3 - status code and content-type should be correct # time=2.012ms
    
    # Subtest: auto status code should be 200
        1..3
        ok 1 - should not error
        ok 2 - should be equal
        ok 3 - should be equivalent
    ok 4 - auto status code should be 200 # time=1.847ms
    
    # Subtest: auto type should be text/plain
        1..3
        ok 1 - should not error
        ok 2 - should be equal
        ok 3 - should be equivalent
    ok 5 - auto type should be text/plain # time=1.497ms
    
    # Subtest: redirect to `/` - 1
        1..1
        ok 1 - should be equal
    ok 6 - redirect to `/` - 1 # time=1.765ms
    
    # Subtest: redirect to `/` - 2
        1..1
        ok 1 - should be equal
    ok 7 - redirect to `/` - 2 # time=0.707ms
    
    # Subtest: redirect to `/` - 3
        1..4
        ok 1 - should not error
        ok 2 - should be equal
        ok 3 - should be equal
        ok 4 - should be equivalent
    ok 8 - redirect to `/` - 3 # time=3.996ms
    
    # Subtest: redirect to `/` - 4
        1..4
        ok 1 - should not error
        ok 2 - should be equal
        ok 3 - should be equal
        ok 4 - should be equivalent
    ok 9 - redirect to `/` - 4 # time=1.447ms
    
    # Subtest: redirect to `/` - 5
        1..3
        ok 1 - should be equal
        ok 2 - should be equal
        ok 3 - should be equal
    ok 10 - redirect to `/` - 5 # time=1.027ms
    
    # Subtest: redirect to `/` - 6
        1..4
        ok 1 - should not error
        ok 2 - should be equal
        ok 3 - should be equal
        ok 4 - should be equivalent
    ok 11 - redirect to `/` - 6 # time=2.562ms
    
    # Subtest: redirect to `/` - 7
        1..4
        ok 1 - should not error
        ok 2 - should be equal
        ok 3 - should be equal
        ok 4 - should be equivalent
    ok 12 - redirect to `/` - 7 # time=1.449ms
    
    # Subtest: redirect to `/` - 8
        1..1
        ok 1 - should be equal
    ok 13 - redirect to `/` - 8 # time=1.086ms
    
    # Subtest: redirect to `/` - 9
        1..1
        ok 1 - should be equal
    ok 14 - redirect to `/` - 9 # time=0.686ms
    
    # Subtest: redirect with async function to `/` - 10
        1..1
        ok 1 - should be equal
    ok 15 - redirect with async function to `/` - 10 # time=2.045ms
    
    1..15
ok 11 - within an instance # time=50.021ms

# Subtest: buffer without content type should send a application/octet-stream and raw buffer
    1..4
    ok 1 - should not error
    ok 2 - should not error
    ok 3 - should be equal
    ok 4 - should be equivalent
ok 12 - buffer without content type should send a application/octet-stream and raw buffer # time=5.492ms

# Subtest: Uint8Array without content type should send a application/octet-stream and raw buffer
    1..4
    ok 1 - should not error
    ok 2 - should not error
    ok 3 - should be equal
    ok 4 - should be equivalent
ok 13 - Uint8Array without content type should send a application/octet-stream and raw buffer # time=11.333ms

# Subtest: Uint16Array without content type should send a application/octet-stream and raw buffer
    1..4
    ok 1 - should not error
    ok 2 - should not error
    ok 3 - should be equal
    ok 4 - should be equivalent
ok 14 - Uint16Array without content type should send a application/octet-stream and raw buffer # time=3.123ms

# Subtest: TypedArray with content type should not send application/octet-stream
    1..4
    ok 1 - should not error
    ok 2 - should not error
    ok 3 - should be equal
    ok 4 - should be equivalent
ok 15 - TypedArray with content type should not send application/octet-stream # time=20.965ms

# Subtest: buffer with content type should not send application/octet-stream
    1..4
    ok 1 - should not error
    ok 2 - should not error
    ok 3 - should be equal
    ok 4 - should be equivalent
ok 16 - buffer with content type should not send application/octet-stream # time=7.336ms

# Subtest: stream with content type should not send application/octet-stream
    1..4
    ok 1 - should not error
    ok 2 - should not error
    ok 3 - should be equal
    ok 4 - should be equivalent
ok 17 - stream with content type should not send application/octet-stream # time=9.188ms

# Subtest: stream without content type should not send application/octet-stream
    1..4
    ok 1 - should not error
    ok 2 - should not error
    ok 3 - should be equal
    ok 4 - should be equivalent
ok 18 - stream without content type should not send application/octet-stream # time=4.315ms

# Subtest: stream using reply.raw.writeHead should return customize headers
    1..6
    ok 1 - should not error
    ok 2 - should be equal
    ok 3 - should not error
    ok 4 - should be equal
    ok 5 - should be equal
    ok 6 - should be equivalent
ok 19 - stream using reply.raw.writeHead should return customize headers # time=4.192ms

# Subtest: plain string without content type should send a text/plain
    1..4
    ok 1 - should not error
    ok 2 - should not error
    ok 3 - should be equal
    ok 4 - should be equivalent
ok 20 - plain string without content type should send a text/plain # time=3.473ms

# Subtest: plain string with content type should be sent unmodified
    1..4
    ok 1 - should not error
    ok 2 - should not error
    ok 3 - should be equal
    ok 4 - should be equivalent
ok 21 - plain string with content type should be sent unmodified # time=11.913ms

# Subtest: plain string with content type and custom serializer should be serialized
    1..4
    ok 1 - should not error
    ok 2 - should not error
    ok 3 - should be equal
    ok 4 - should be equivalent
ok 22 - plain string with content type and custom serializer should be serialized # time=5.08ms

# Subtest: plain string with content type application/json should NOT be serialized as json
    1..4
    ok 1 - should not error
    ok 2 - should not error
    ok 3 - should be equal
    ok 4 - should be equivalent
ok 23 - plain string with content type application/json should NOT be serialized as json # time=3.283ms

# Subtest: plain string with custom json content type should NOT be serialized as json
    1..19
    ok 1 - should not error
    ok 2 - should not error
    ok 3 - should be equal
    ok 4 - should be equivalent
    ok 5 - should not error
    ok 6 - should be equal
    ok 7 - should be equivalent
    ok 8 - should not error
    ok 9 - should be equal
    ok 10 - should be equivalent
    ok 11 - should not error
    ok 12 - should be equal
    ok 13 - should be equivalent
    ok 14 - should not error
    ok 15 - should be equal
    ok 16 - should be equivalent
    ok 17 - should not error
    ok 18 - should be equal
    ok 19 - should be equivalent
ok 24 - plain string with custom json content type should NOT be serialized as json # time=6.393ms

# Subtest: non-string with content type application/json SHOULD be serialized as json
    1..4
    ok 1 - should not error
    ok 2 - should not error
    ok 3 - should be equal
    ok 4 - should be equivalent
ok 25 - non-string with content type application/json SHOULD be serialized as json # time=3.699ms

# Subtest: non-string with custom json's content-type SHOULD be serialized as json
    1..4
    ok 1 - should not error
    ok 2 - should not error
    ok 3 - should be equal
    ok 4 - should be equivalent
ok 26 - non-string with custom json's content-type SHOULD be serialized as json # time=5.672ms

# Subtest: non-string with custom json content type SHOULD be serialized as json
    1..16
    ok 1 - should not error
    ok 2 - should not error
    ok 3 - should be equal
    ok 4 - should be equivalent
    ok 5 - should not error
    ok 6 - should be equal
    ok 7 - should be equivalent
    ok 8 - should not error
    ok 9 - should be equal
    ok 10 - should be equivalent
    ok 11 - should not error
    ok 12 - should be equal
    ok 13 - should be equivalent
    ok 14 - should not error
    ok 15 - should be equal
    ok 16 - should be equivalent
ok 27 - non-string with custom json content type SHOULD be serialized as json # time=5.811ms

# Subtest: error object with a content type that is not application/json should work
    1..6
    ok 1 - should not error
    ok 2 - should be equal
    ok 3 - should be equal
    ok 4 - should not error
    ok 5 - should be equal
    ok 6 - should be equal
ok 28 - error object with a content type that is not application/json should work # time=2.181ms

# Subtest: undefined payload should be sent as-is
    1..6
    ok 1 - should not error
    ok 2 - should be equal
    ok 3 - should not error
    ok 4 - should be equal
    ok 5 - should be equal
    ok 6 - should be equal
ok 29 - undefined payload should be sent as-is # time=4.987ms

# Subtest: for HEAD method, no body should be sent but content-length should be
    1..11
    ok 1 - should not error
    ok 2 - should be equal
    ok 3 - should not error
    ok 4 - should be equal
    ok 5 - should be equal
    ok 6 - should be equal
    ok 7 - should be equal
    ok 8 - should not error
    ok 9 - should be equal
    ok 10 - should be equal
    ok 11 - should be equal
ok 30 - for HEAD method, no body should be sent but content-length should be # time=5.975ms

# Subtest: reply.send(new NotFound()) should not invoke the 404 handler
    1..9
    ok 1 - should not error
    ok 2 - should not error
    ok 3 - should be equal
    ok 4 - should be equal
    ok 5 - should be equivalent
    ok 6 - should not error
    ok 7 - should be equal
    ok 8 - should be equal
    ok 9 - should be equivalent
ok 31 - reply.send(new NotFound()) should not invoke the 404 handler # time=6.219ms

# Subtest: reply can set multiple instances of same header
    1..4
    ok 1 - should not error
    ok 2 - should not error
    ok 3 - should be equal
    ok 4 - should be equivalent strictly
ok 32 - reply can set multiple instances of same header # time=3.587ms

# Subtest: reply.hasHeader returns correct values
    1..3
    ok 1 - should not error
    ok 2 - should be equal
    ok 3 - should be equal
ok 33 - reply.hasHeader returns correct values # time=2.645ms

# Subtest: reply.getHeader returns correct values
    1..5
    ok 1 - should not error
    ok 2 - should be equal
    ok 3 - should be equivalent strictly
    ok 4 - should be equivalent strictly
    ok 5 - should be equivalent strictly
ok 34 - reply.getHeader returns correct values # time=2.825ms

# Subtest: reply.getHeader returns raw header if there is not in the reply headers
    1..1
    ok 1 - should be equal
ok 35 - reply.getHeader returns raw header if there is not in the reply headers # time=0.268ms

# Subtest: reply.getHeaders returns correct values
    1..3
    ok 1 - should be equivalent strictly
    ok 2 - should be equivalent strictly
    ok 3 - should not error
ok 36 - reply.getHeaders returns correct values # time=1.399ms

# Subtest: reply.removeHeader can remove the value
    1..5
    ok 1 - should not error
    ok 2 - should be equal
    ok 3 - should be equal
    ok 4 - should be equivalent strictly
    ok 5 - (unnamed test)
ok 37 - reply.removeHeader can remove the value # time=3.673ms

# Subtest: reply.header can reset the value
    1..3
    ok 1 - should not error
    ok 2 - should be equivalent strictly
    ok 3 - (unnamed test)
ok 38 - reply.header can reset the value # time=5.203ms

# Subtest: reply.hasHeader computes raw and fastify headers
    1..4
    ok 1 - should not error
    ok 2 - should be equal
    ok 3 - should be equal
    ok 4 - (unnamed test)
ok 39 - reply.hasHeader computes raw and fastify headers # time=3.781ms

# Subtest: Reply should handle JSON content type with a charset
    1..16
    ok 1 - should not error
    ok 2 - should be equal
    ok 3 - should not error
    ok 4 - should be equal
    ok 5 - should not error
    ok 6 - should be equal
    ok 7 - should not error
    ok 8 - should be equal
    ok 9 - should not error
    ok 10 - should be equal
    ok 11 - should not error
    ok 12 - should be equal
    ok 13 - should not error
    ok 14 - should be equal
    ok 15 - should not error
    ok 16 - should be equal
ok 40 - Reply should handle JSON content type with a charset # time=3.148ms

# Subtest: Content type and charset set previously
    1..2
    ok 1 - should not error
    ok 2 - should be equal
ok 41 - Content type and charset set previously # time=1.083ms

# Subtest: .status() is an alias for .code()
    1..2
    ok 1 - should not error
    ok 2 - should be equal
ok 42 - .status() is an alias for .code() # time=0.918ms

# Subtest: .statusCode is getter and setter
    1..4
    ok 1 - default status value
    ok 2 - should be equal
    ok 3 - should not error
    ok 4 - should be equal
ok 43 - .statusCode is getter and setter # time=1.164ms

# Subtest: reply.header setting multiple cookies as multiple Set-Cookie headers
    1..7
    ok 1 - should not error
    ok 2 - should be equal
    ok 3 - should be equivalent strictly
    ok 4 - should not error
    ok 5 - should not error
    ok 6 - should be equal
    ok 7 - should be equivalent strictly
ok 44 - reply.header setting multiple cookies as multiple Set-Cookie headers # time=7.467ms

# Subtest: should emit deprecation warning when trying to modify the reply.sent property
    1..4
    ok 1 - should be equal
    ok 2 - should be equal
    ok 3 - should not error
    ok 4 - (unnamed test)
ok 45 - should emit deprecation warning when trying to modify the reply.sent property # time=1.466ms

# Subtest: should emit deprecation warning when trying to use the reply.context.config property
    1..4
    ok 1 - should be equal
    ok 2 - should be equal
    ok 3 - should not error
    ok 4 - (unnamed test)
ok 46 - should emit deprecation warning when trying to use the reply.context.config property # time=1.126ms

# Subtest: should throw error when passing falsy value to reply.sent
    1..4
    ok 1 - should be equal
    ok 2 - should be equal
    ok 3 - should not error
    ok 4 - (unnamed test)
ok 47 - should throw error when passing falsy value to reply.sent # time=1.16ms

# Subtest: should throw error when attempting to set reply.sent more than once
    1..3
    ok 1 - should be equal
    ok 2 - should not error
    ok 3 - (unnamed test)
ok 48 - should throw error when attempting to set reply.sent more than once # time=1.263ms

# Subtest: should not throw error when attempting to set reply.sent if the underlining request was sent
    1..3
    ok 1 - expect to not throw
    ok 2 - should not error
    ok 3 - (unnamed test)
ok 49 - should not throw error when attempting to set reply.sent if the underlining request was sent # time=1.052ms

# Subtest: reply.elapsedTime should return 0 before the timer is initialised on the reply by setting up response listeners
    1..1
    ok 1 - should be equal
ok 50 - reply.elapsedTime should return 0 before the timer is initialised on the reply by setting up response listeners # time=0.197ms

# Subtest: reply.elapsedTime should return a number greater than 0 after the timer is initialised on the reply by setting up response listeners
    1..1
    ok 1 - should be equal
ok 51 - reply.elapsedTime should return a number greater than 0 after the timer is initialised on the reply by setting up response listeners # time=1.406ms

# Subtest: reply.elapsedTime should return the time since a request started while inflight
    1..1
    ok 1 - should be equal
ok 52 - reply.elapsedTime should return the time since a request started while inflight # time=1.026ms

# Subtest: reply.elapsedTime should return the same value after a request is finished
    1..1
    ok 1 - should be equal
ok 53 - reply.elapsedTime should return the same value after a request is finished # time=1.03ms

# Subtest: reply should use the custom serializer
    1..4
    ok 1 - should be equivalent
    ok 2 - should be equal
    ok 3 - should not error
    ok 4 - should be equal
ok 54 - reply should use the custom serializer # time=1.268ms

# Subtest: reply should use the right serializer in encapsulated context
    1..9
    ok 1 - should be equivalent
    ok 2 - should be equivalent
    ok 3 - should be equivalent
    ok 4 - should not error
    ok 5 - should be equal
    ok 6 - should not error
    ok 7 - should be equal
    ok 8 - should not error
    ok 9 - should be equal
ok 55 - reply should use the right serializer in encapsulated context # time=2.599ms

# Subtest: reply should use the right serializer in deep encapsulated context
    1..8
    ok 1 - should be equivalent
    ok 2 - should be equivalent
    ok 3 - should not error
    ok 4 - should be equal
    ok 5 - should not error
    ok 6 - should be equal
    ok 7 - should not error
    ok 8 - should be equal
ok 56 - reply should use the right serializer in deep encapsulated context # time=3.874ms

# Subtest: reply should use the route serializer
    1..3
    ok 1 - should be equivalent
    ok 2 - should not error
    ok 3 - should be equal
ok 57 - reply should use the route serializer # time=1.205ms

# Subtest: cannot set the replySerializer when the server is running
    1..2
    ok 1 - should not error
    ok 2 - should be equal
ok 58 - cannot set the replySerializer when the server is running # time=2.453ms

# Subtest: reply should not call the custom serializer for errors and not found
    1..9
    ok 1 - should be equivalent
    ok 2 - should be equal
    ok 3 - should not error
    ok 4 - should be equal
    ok 5 - should be equal
    ok 6 - should not error
    ok 7 - should be equal
    ok 8 - should not error
    ok 9 - should be equal
ok 59 - reply should not call the custom serializer for errors and not found # time=2.691ms

# Subtest: reply.then
    1..4
    # Subtest: without an error
        1..1
        ok 1 - fulfilled called
    ok 1 - without an error # time=1.243ms
    
    # Subtest: with an error
        1..1
        ok 1 - should be equal
    ok 2 - with an error # time=0.362ms
    
    # Subtest: with error but without reject callback
        1..1
        ok 1 - (unnamed test)
    ok 3 - with error but without reject callback # time=0.221ms
    
    # Subtest: with error, without reject callback, with logger
        1..1
        ok 1 - should be equal
    ok 4 - with error, without reject callback, with logger # time=0.305ms
    
ok 60 - reply.then # time=7.759ms

# Subtest: reply.sent should read from response.writableEnded if it is defined
    1..1
    ok 1 - should be equal
ok 61 - reply.sent should read from response.writableEnded if it is defined # time=0.178ms

# Subtest: redirect to an invalid URL should not crash the server
    ok 1 - should be equal
    ok 2 - should be equal
    ok 3 - should be equivalent
    ok 4 - should be equal
    ok 5 - should be equal
    ok 6 - should be equal
    ok 7 - should be equal
    1..7
ok 62 - redirect to an invalid URL should not crash the server # time=8.584ms

# Subtest: redirect with deprecated signature should warn
    1..4
    ok 1 - should be equal
    ok 2 - should be equal
    ok 3 - should not error
    ok 4 - (unnamed test)
ok 63 - redirect with deprecated signature should warn # time=1.378ms

# Subtest: invalid response headers should not crash the server
    ok 1 - only the first invalid header is logged
    ok 2 - should be equal
    ok 3 - should be equivalent
    1..3
ok 64 - invalid response headers should not crash the server # time=4.574ms

# Subtest: invalid response headers when sending back an error
    ok 1 - only the first invalid header is logged
    ok 2 - should be equal
    ok 3 - should be equivalent
    1..3
ok 65 - invalid response headers when sending back an error # time=2.88ms

# Subtest: invalid response headers and custom error handler
    ok 1 - custom error handler receives the error
    ok 2 - only the first invalid header is logged
    ok 3 - should be equal
    ok 4 - should be equivalent
    1..4
ok 66 - invalid response headers and custom error handler # time=4.119ms

# Subtest: reply.send will intercept ERR_HTTP_HEADERS_SENT and log an error message
    1..2
    ok 1 - should be equal
    ok 2 - should be equal
ok 67 - reply.send will intercept ERR_HTTP_HEADERS_SENT and log an error message # time=0.363ms

# Subtest: Uint8Array view of ArrayBuffer returns correct byteLength
    1..5
    ok 1 - should not error
    ok 2 - should not error
    ok 3 - should be equal
    ok 4 - should be equal
    ok 5 - should be equivalent
ok 68 - Uint8Array view of ArrayBuffer returns correct byteLength # time=6.699ms

1..68
