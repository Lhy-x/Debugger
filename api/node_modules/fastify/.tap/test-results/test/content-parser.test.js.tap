TAP version 14
# Subtest: hasContentTypeParser
    1..0
ok 1 - hasContentTypeParser # time=5.617ms

# Subtest: should know about internal parsers
    1..5
    ok 1 - should not error
    ok 2 - should be equal
    ok 3 - should be equal
    ok 4 - should be equal
    ok 5 - should be equal
ok 2 - should know about internal parsers # time=9.264ms

# Subtest: should only work with string and RegExp
    1..8
    ok 1 - should be equal
    ok 2 - should be equal
    ok 3 - should be equal
    ok 4 - should be equal
    ok 5 - should be equal
    ok 6 - should be equal
    ok 7 - should be equal
    ok 8 - expected to throw
ok 3 - should only work with string and RegExp # time=1.552ms

# Subtest: getParser
    1..0
ok 4 - getParser # time=9.412ms

# Subtest: existingParser
    ok 1 - should be equal
    ok 2 - should be equal
    ok 3 - should be equal
    ok 4 - should be equal
    ok 5 - should be equal
    ok 6 - should be equal
    ok 7 - should be equal
    1..7
ok 5 - existingParser # time=1.223ms

# Subtest: add
    1..0
ok 6 - add # time=1.579ms

# Subtest: non-Error thrown from content parser is properly handled
    1..3
    ok 1 - should be equal
    ok 2 - should not error
    ok 3 - should be equal
ok 7 - non-Error thrown from content parser is properly handled # time=7.861ms

# Subtest: Error thrown 415 from content type is null and make post request to server
    1..3
    ok 1 - should not error
    ok 2 - should be equal
    ok 3 - should be equal
ok 8 - Error thrown 415 from content type is null and make post request to server # time=1.99ms

# Subtest: remove
    1..0
ok 9 - remove # time=1.631ms

# Subtest: remove all should remove all existing parsers and reset cache
    1..4
    ok 1 - should be equivalent
    ok 2 - should be equivalent
    ok 3 - should be equivalent
    ok 4 - should be equivalent
ok 10 - remove all should remove all existing parsers and reset cache # time=0.755ms

# Subtest: Safeguard against malicious content-type / 1
    1..12
    ok 1 - should be equivalent
    ok 2 - should be equivalent
    ok 3 - should be equivalent
    ok 4 - should be equivalent
    ok 5 - should be equivalent
    ok 6 - should be equivalent
    ok 7 - should be equivalent
    ok 8 - should be equivalent
    ok 9 - should be equivalent
    ok 10 - should be equivalent
    ok 11 - should be equivalent
    ok 12 - should be equivalent
ok 11 - Safeguard against malicious content-type / 1 # time=3.381ms

# Subtest: Safeguard against malicious content-type / 2
    1..1
    ok 1 - should be equivalent
ok 12 - Safeguard against malicious content-type / 2 # time=1.204ms

# Subtest: Safeguard against malicious content-type / 3
    1..1
    ok 1 - should be equivalent
ok 13 - Safeguard against malicious content-type / 3 # time=1.177ms

# Subtest: Safeguard against content-type spoofing - string
    1..1
    ok 1 - should be called
ok 14 - Safeguard against content-type spoofing - string # time=1.197ms

# Subtest: Warning against improper content-type - regexp
    1..2
    ok 1 - should be equal
    ok 2 - should be equal
ok 15 - Warning against improper content-type - regexp # time=1.521ms

# Subtest: content-type match parameters - string 1
    1..1
    ok 1 - should be called
ok 16 - content-type match parameters - string 1 # time=1.272ms

# Subtest: content-type match parameters - regexp
    1..1
    ok 1 - should be called
ok 17 - content-type match parameters - regexp # time=1.086ms

# Subtest: content-type fail when parameters not match - string 1
    1..1
    ok 1 - should be equivalent
ok 18 - content-type fail when parameters not match - string 1 # time=24.053ms

# Subtest: content-type fail when parameters not match - string 2
    1..1
    ok 1 - should be equivalent
ok 19 - content-type fail when parameters not match - string 2 # time=2.628ms

# Subtest: content-type fail when parameters not match - regexp
    1..1
    ok 1 - should be equivalent
ok 20 - content-type fail when parameters not match - regexp # time=1.303ms

# Subtest: content-type regexp list should be cloned when plugin override
    1..6
    ok 1 - should be equivalent
    ok 2 - should be equivalent
    ok 3 - should be equivalent
    ok 4 - should be equivalent
    ok 5 - should be equivalent
    ok 6 - should be equivalent
ok 21 - content-type regexp list should be cloned when plugin override # time=7.824ms

# Subtest: edge case content-type - ;
    1..1
    ok 1 - end
ok 22 - edge case content-type - ; # time=2.81ms

# Subtest: should return matching parser
    1..6
    ok 1 - should be equal
    ok 2 - should be equal
    ok 3 - should be equal
    ok 4 - should be equal
    ok 5 - should be equal
    ok 6 - should be equal
ok 23 - should return matching parser # time=5.88ms

# Subtest: should return matching parser with caching /1
    1..6
    ok 1 - should be equal
    ok 2 - should be equal
    ok 3 - should be equal
    ok 4 - should be equal
    ok 5 - should be equal
    ok 6 - should be equal
ok 24 - should return matching parser with caching /1 # time=0.49ms

# Subtest: should return matching parser with caching /2
    1..6
    ok 1 - should be equal
    ok 2 - should be equal
    ok 3 - should be equal
    ok 4 - should be equal
    ok 5 - should be equal
    ok 6 - should be equal
ok 25 - should return matching parser with caching /2 # time=0.508ms

# Subtest: should prefer content type parser with string value
    1..2
    ok 1 - should be equal
    ok 2 - should be equal
ok 26 - should prefer content type parser with string value # time=0.524ms

# Subtest: should return parser that catches all if no other is set
    1..3
    ok 1 - should be equal
    ok 2 - should be equal
    ok 3 - should be equal
ok 27 - should return parser that catches all if no other is set # time=0.391ms

# Subtest: should return undefined if no matching parser exist
    1..2
    ok 1 - should be equal
    ok 2 - should be equal
ok 28 - should return undefined if no matching parser exist # time=0.337ms

# Subtest: returns always false for "*"
    1..2
    ok 1 - should be equal
    ok 2 - should be equal
ok 29 - returns always false for "*" # time=0.308ms

# Subtest: let you override the default parser once
    1..2
    ok 1 - Content type parser 'application/json' already present
    ok 2 - Content type parser 'text/plain' already present
ok 30 - let you override the default parser once # time=0.405ms

# Subtest: should only accept string and RegExp
    1..4
    ok 1 - should not error
    ok 2 - should not error
    ok 3 - The content type should be a string or a RegExp
    ok 4 - The content type should be a string or a RegExp
ok 31 - should only accept string and RegExp # time=0.522ms

# Subtest: should set "*" as parser that catches all
    1..1
    ok 1 - should be equal
ok 32 - should set "*" as parser that catches all # time=0.265ms

# Subtest: should lowercase contentTypeParser name
    1..1
    ok 1 - should be equivalent
ok 33 - should lowercase contentTypeParser name # time=0.295ms

# Subtest: should trim contentTypeParser name
    1..1
    ok 1 - should be equivalent
ok 34 - should trim contentTypeParser name # time=0.362ms

# Subtest: should remove default parser
    1..6
    ok 1 - should be equal
    ok 2 - should be equal
    ok 3 - should be equal
    ok 4 - should be equal
    ok 5 - should be equal
    ok 6 - should be equal
ok 35 - should remove default parser # time=0.457ms

# Subtest: should remove RegExp parser
    1..3
    ok 1 - should be equal
    ok 2 - should be equal
    ok 3 - should be equal
ok 36 - should remove RegExp parser # time=0.364ms

# Subtest: should throw an error if content type is neither string nor RegExp
    1..1
    ok 1 - expected to throw
ok 37 - should throw an error if content type is neither string nor RegExp # time=0.32ms

# Subtest: should return false if content type does not exist
    1..1
    ok 1 - should be equal
ok 38 - should return false if content type does not exist # time=0.245ms

# Subtest: should not remove any content type parser if content type does not exist
    1..2
    ok 1 - should be equal
    ok 2 - should be equivalent
ok 39 - should not remove any content type parser if content type does not exist # time=0.275ms

1..39
